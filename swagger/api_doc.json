{
  "swagger": "2.0",
  "info": {
    "description": "This is a sample server for an app that provides time-slots for  interviews between candidates and their interviewers.",
    "version": "1.0.0",
    "title": "Manage Interview API",
    "contact": {
      "email": "nstonny@gmail.com"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    }
  },
  "host": "localhost:3000",
  "basePath": "/api/v1",
  "tags": [
    {
      "name": "users",
      "description": "Create new user, login and logout"
    },
    {
      "name": "employees",
      "description": "Access to employee records"
    },
    {
      "name": "candidates",
      "description": "Access to candidate records"
    },
    {
      "name": "availabilities",
      "description": "Access to employee availabilities"
    }
  ],
  "schemes": [
    "http"
  ],
  "securityDefinitions": {
    "Bearer": {
      "description": "For accessing the API a valid JWT token must be passed in all the queries in\nthe 'Authorization' header.\n\n\nA valid JWT token is generated by the API and retourned as answer of a call\nto the route /login giving a valid user & password.\n\n\nThe following syntax must be used in the 'Authorization' header :\n\n    Bearer: xxxxxx.yyyyyyy.zzzzzz\n",
      "type": "apiKey",
      "name": "x-auth",
      "in": "header"
    }
  },
  "paths": {
    "/users": {
      "post": {
        "tags": [
          "users"
        ],
        "summary": "Create new user",
        "operationId": "addUser",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "User object to be added",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User created successfully",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "500": {
            "description": "Invalid input",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/users/login": {
      "post": {
        "tags": [
          "users"
        ],
        "description": "Allows users to login, and receive a token",
        "operationId": "loginUser",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Create user object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Login"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User logged in successfully",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "500": {
            "description": "Invalid input",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/users/logout": {
      "delete": {
        "tags": [
          "users"
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Logs out current logged in user session",
        "operationId": "logoutUser",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Deleted successfully",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/employees": {
      "get": {
        "tags": [
          "employees"
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Returns all employees",
        "operationId": "getEmployees",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Employees retrieved successfully",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        }
      },
      "post": {
        "tags": [
          "employees"
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Adds new employee to the database",
        "operationId": "addEmployee",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Contains employee object to add",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Employee"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Employee successfully added",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/employees/{employeeId}": {
      "get": {
        "tags": [
          "employees"
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Returns a single employee",
        "operationId": "getEmployeeById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "employeeId",
            "in": "path",
            "description": "ID of employee to return",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Employee found",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "employees"
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Deletes employee",
        "operationId": "deleteEmployee",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "employeeId",
            "in": "path",
            "description": "ID of employee to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted successfully",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        }
      },
      "put": {
        "tags": [
          "employees"
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Update an existing employee data",
        "operationId": "updateEmployee",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "employeeId",
            "in": "path",
            "description": "ID of employee to update",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Employee object that needs to be updated in the database",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Employee"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Updated successfully",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/candidates": {
      "get": {
        "tags": [
          "candidates"
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Returns all candidates",
        "operationId": "getCandidates",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Candidates retrieved successfully",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        }
      },
      "post": {
        "tags": [
          "candidates"
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Adds new candidate to the database",
        "operationId": "addCandidate",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Contains candidate object to add",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Candidate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Candidate successfully added",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/candidates/{candidateId}": {
      "get": {
        "tags": [
          "candidates"
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Returns a single candidate",
        "operationId": "getCandidateById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "candidateId",
            "in": "path",
            "description": "ID of candidate to return",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Candidate found",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "candidates"
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Deletes candidate",
        "operationId": "deleteCandidate",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "candidateId",
            "in": "path",
            "description": "ID of candidate to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted successfully",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        }
      },
      "put": {
        "tags": [
          "candidates"
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Update an existing candidate data",
        "operationId": "updateCandidate",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "candidateId",
            "in": "path",
            "description": "ID of candidate to update",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Candidate object that needs to be updated in the database",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Candidate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Updated successfully",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/availabilities": {
      "get": {
        "tags": [
          "availabilities"
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Returns all availabilities",
        "operationId": "getAvailabilities",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Availabilities retrieved successfully",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/availabilities/{availabilityId}": {
      "get": {
        "tags": [
          "availabilities"
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Returns a single availability",
        "operationId": "getAvailabilityById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "availabilityId",
            "in": "path",
            "description": "ID of availability to return",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Availability found",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "User": {
      "type": "object",
      "properties": {
        "firstName": {
          "type": "string",
          "description": "first name of the user"
        },
        "lastName": {
          "type": "string",
          "description": "last name of the user"
        },
        "email": {
          "type": "string",
          "description": "email address of the user"
        },
        "password": {
          "type": "string",
          "description": "password entered by the user"
        }
      },
      "xml": {
        "name": "User"
      }
    },
    "Login": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string",
          "description": "email of user"
        },
        "password": {
          "type": "string",
          "description": "password entered by the user"
        }
      },
      "xml": {
        "name": "Login"
      }
    },
    "Employee": {
      "type": "object",
      "properties": {
        "firstName": {
          "type": "string",
          "description": "first name of employee"
        },
        "lastName": {
          "type": "string",
          "description": "last name of employee"
        },
        "email": {
          "type": "string",
          "description": "email of employee"
        },
        "department": {
          "type": "string",
          "description": "department that employee applied to"
        },
        "position": {
          "type": "string",
          "description": "position that the employee works in"
        },
        "availabilities": {
          "type": "array",
          "description": "List availabilities of employees",
          "items": {
            "$ref": "#/definitions/Availability"
          }
        }
      },
      "xml": {
        "name": "Employee"
      }
    },
    "Candidate": {
      "type": "object",
      "properties": {
        "firstName": {
          "type": "string",
          "description": "first name of the candidate"
        },
        "lastName": {
          "type": "string",
          "description": "last name of the candidate"
        },
        "email": {
          "type": "string",
          "description": "email of the candidate"
        },
        "positionAppliedFor": {
          "type": "string",
          "description": "position that the candidate applied to"
        },
        "employees": {
          "type": "array",
          "description": "List of employees to interview the candidate",
          "items": {
            "$ref": "#/definitions/Employee"
          }
        }
      },
      "xml": {
        "name": "Candidate"
      }
    },
    "Availability": {
      "type": "object",
      "properties": {
        "day": {
          "type": "string",
          "description": "day of the month"
        },
        "time": {
          "type": "string",
          "description": "time of the month"
        }
      },
      "xml": {
        "name": "Availability"
      }
    },
    "ApiResponse": {
      "type": "object",
      "properties": {
        "success": {
          "type": "boolean"
        },
        "code": {
          "type": "integer"
        },
        "result": {
          "type": "array",
          "description": "List of resulting data",
          "items": {
            "type": "object"
          }
        }
      }
    }
  }
}